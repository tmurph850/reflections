1*What happens when you initialize a repository? Why do you need to do it?

. When you initialize a repository you will recieve a message telling you that an empty git repository has been initialized in the directory location,
  you always need to initialize a repository so you are able to utilize the benefits of git in your directory.

2*How is the staging area different from the working directory and the repository? What value do you think it offers?

.The staging area is different from the working directory and the repository, the working directory is the folder/location of the files you
will be working on. The staging area is the middle ground between the working directory and the repository, in the staging area you will find the
files you wish to be commited into the repository upon your next commit. The repository holds all commits.

3*How can you use the staging area to make sure you have one commit per logical change?

.With the staging area you able to control which files you are commiting, so if i fixed a bug in file1 and file 2, but i would prefer to commit these each seperately 
then i could add file 1 to my staging area and commit it. After commiting file1 i could then add file2 to the staging area and submit it!

4*What are some situations when branches would be helpful in keeping your history organized? How would branches help?

. Branches are a very useful tool, if you had a game that works well but you wanted to add some new functionality to it and keep it playable during the process of
adding these new functions, branches would be a great way to experiment while still keeping a master branch available and useable. The branch feature also gives you
the ability to save the work you might be doing on one feature and stop even if not completed, and then go and work on some other feature. This makes branches
amazing for working on different features!

5*How do the diagrams help you visualize the branch structure?

. The diagrams used in the lessons help you to visualize the tree structure of the branches, it helps to visualize the reachability of commits from certain 
branches.

6*What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

.The result of merging two branches together is a new commit inside the main branch you are using, with the history of both merged branches as well as the functionality of both branches.

7*What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

. Git's automatic merging takes time out of the process of the merge, however it may not be as precise as doing it by hand.